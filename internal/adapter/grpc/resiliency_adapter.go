package grpc

import (
	"context"
	"fmt"
	"io"
	"log"
	"strconv"

	domainResiliency "github.com/viquitorreis/my-grpc-go-server/internal/application/resiliency"
	"github.com/viquitorreis/my-grpc-proto/protogen/go/resiliency"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func generateErrStatus(statusCode uint32) error {
	str := "Generated by server"

	if sc, ok := domainResiliency.StatusCodeMap[statusCode]; ok {
		return status.New(sc, str).Err()
	}

	// return internal error se status code não for encontrado
	return status.New(codes.Internal, str).Err()
}

func (a *GrpcAdapter) UnaryResiliency(ctx context.Context, req *resiliency.ResiliencyRequest) (*resiliency.ResiliencyReponse, error) {
	log.Println("UnaryResiliency called")
	str, sts := a.resiliencyService.GenerateResiliency(req.MinDelaySecond, req.MaxDelaySecond, req.StatusCodes)

	if err := generateErrStatus(sts); err != nil {
		return nil, err
	}

	return &resiliency.ResiliencyReponse{
		DummyString: str,
	}, nil
}

func (a *GrpcAdapter) ServerStreamResiliency(req *resiliency.ResiliencyRequest, stream resiliency.ResiliencyService_ServerStreamResiliencyServer) error {
	log.Println("ServerStreamResiliency called")
	context := stream.Context()

	for {
		select {
		case <-context.Done():
			log.Println("client cancelou o streaming")
			return nil
		default:
			str, sts := a.resiliencyService.GenerateResiliency(req.MinDelaySecond, req.MaxDelaySecond, req.StatusCodes)

			if err := generateErrStatus(sts); err != nil {
				return err
			}

			stream.Send(&resiliency.ResiliencyReponse{
				DummyString: str,
			})
		}
	}
}

func (a *GrpcAdapter) ClientStreamResiliency(stream resiliency.ResiliencyService_ClientStreamResiliencyServer) error {
	log.Println("ClientStreamResiliency called")

	i := 0

	for {
		req, err := stream.Recv()
		if err != nil {
			if err == io.EOF {
				log.Println("ClientStreamResiliency finalizado")

				res := resiliency.ResiliencyReponse{
					DummyString: fmt.Sprintf("Recebeu %v requisições do client", strconv.Itoa(i)),
				}

				return stream.SendAndClose(&res)
			}

			log.Printf("Error receiving stream: %v", err)
			return err
		}

		if req != nil {
			_, sts := a.resiliencyService.GenerateResiliency(req.MinDelaySecond, req.MaxDelaySecond, req.StatusCodes)

			if err := generateErrStatus(sts); err != nil {
				log.Printf("Error generating error status: %v", err)
				return err
			}
		}

		i = i + 1
	}
}

func (a *GrpcAdapter) BidirectionalStreamResiliency(stream resiliency.ResiliencyService_BidirectionalStreamResiliencyServer) error {
	log.Println("BidirectionalStreamResiliency called")

	context := stream.Context()
	for {
		select {
		case <-context.Done():
			log.Println("client cancelou o streaming")
			return nil
		default:
			req, err := stream.Recv()

			if err == io.EOF {
				return nil
			}

			if err != nil {
				log.Fatalln("Erro ao ler stream do client:", err)
			}

			str, sts := a.resiliencyService.GenerateResiliency(req.MinDelaySecond, req.MaxDelaySecond, req.StatusCodes)

			if err := generateErrStatus(sts); err != nil {
				return err
			}

			err = stream.Send(&resiliency.ResiliencyReponse{
				DummyString: str,
			})

			if err != nil {
				log.Fatalln("Erro ao enviar response da stream para o client:", err)
			}
		}
	}
}
